dnl $Id$
dnl Process this file with autoconf to produce a configure script.
AC_INIT(include/class.h)

AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADER(include/setup.h zlib/setup.h)

PACKAGE=ircd-hybrid
VERSION=6.0
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX
AC_CANONICAL_SYSTEM
AC_PROG_MAKE_SET
AC_PATH_PROG(RM,rm)
AC_PATH_PROG(CP,cp)
AC_PROG_INSTALL

dnl Checks for libraries.
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_FUNC(res_mkquery,, AC_CHECK_LIB(resolv, res_mkquery))
AC_CHECK_LIB(socket, socket)
AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(descrypt, crypt,,AC_CHECK_LIB(crypt, crypt,,)))

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/param.h unistd.h errno.h string.h stdlib.h stddef.h getopt.h) 

dnl Check for stdarg.h - if we can't find it, halt configure
AC_CHECK_HEADER(stdarg.h, , AC_MSG_ERROR(** stdarg.h could not be found - ircd-hybrid will not compile without it **))

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

dnl check for poll() call
AC_CHECK_FUNC(poll, AC_DEFINE(USE_POLL),)

dnl OpenSSL support
AC_MSG_CHECKING(for OpenSSL)
AC_ARG_ENABLE(openssl,
[  --enable-openssl[=DIR]       Enable OpenSSL support (DIR optional).
  --disable-openssl            Disable OpenSSL support. ],
[ cf_enable_openssl=$enableval ],
[ cf_enable_openssl="auto" ])
AC_MSG_RESULT($cf_enable_openssl)

dnl If we want OpenSSL, get some information about it first.
dnl jdc -- This is great: not.  There are too many combinations of
dnl        possibilities for this argument.  Here ya go:
dnl          <no argument>         (cf_enable_openssl='auto')
dnl          --enable-openssl      (cf_enable_openssl='yes')
dnl          --enable-openssl=DIR  (cf_enable_openssl='DIR')
dnl          --disable-openssl     (cf_enable_openssl='no')
if test "X$cf_enable_openssl" != "Xno"; then
  AC_MSG_CHECKING(for OpenSSL include directory)
  if test "X$cf_enable_openssl" != "Xauto" &&
     test "X$cf_enable_openssl" != "Xyes"; then
        CPPFLAGS="$CPPFLAGS -I${cf_enable_openssl}/include"
        LIBS="$LIBS -L${cf_enable_openssl}/lib"
        cf_openssl_incl="${cf_enable_openssl}/include"
  else
    dnl Do the automatic probe here.  Check some directories to see
    dnl what exists.
    for incdir in /usr/include/openssl \
                  /usr/local/openssl/include \
                  /usr/local/ssl/include ; do
      if test -f "${incdir}/opensslv.h"; then
        cf_openssl_incl="$incdir"
        break
      fi
    done
    unset incdir
    dnl If no directories in the list were found to be valid, then we
    dnl can't support OpenSSL.  Tough titty said the kitty.
    if test "X$cf_openssl_incl" = "X"; then
      AC_MSG_WARN(OpenSSL cannot be found.  Please specify it instead.)
      cf_enable_openssl="no"
    else
      dnl Otherwise, set CPPFLAGS and move along happily.
      CPPFLAGS="$CPPFLAGS -I$cf_openssl_incl"
    fi
  fi
  AC_MSG_RESULT($cf_openssl_incl)
fi

if test "X$cf_enable_openssl" != "Xno"; then
    dnl Check OpenSSL version (must be 0.9.6 or above!)
    AC_MSG_CHECKING(for OpenSSL 0.9.6 or above)
    AC_TRY_RUN(
    [
#include "opensslv.h"
int main() {
  if (OPENSSL_VERSION_NUMBER < 0x00906000)
    exit(1);
  exit(0);
}
    ], cf_openssl_version_ok='yes',
       cf_openssl_version_ok='no',
       cf_openssl_version_ok='no')

    if test "X$cf_openssl_version_ok" = "Xyes"; then
        AC_MSG_RESULT(ok)
        dnl Do all the HAVE_LIBCRYPTO magic -- and check for ciphers
        AC_CHECK_LIB(crypto, RSA_free)
        if test "X$ac_cv_lib_crypto_RSA_free" = "Xyes"; then
            cf_openssl_ciphers=''
            AC_CHECK_FUNCS(EVP_bf_cfb,
                cf_openssl_ciphers="${cf_openssl_ciphers}BF/256 BF/128 ")
            AC_CHECK_FUNCS(EVP_cast5_cfb,
                cf_openssl_ciphers="${cf_openssl_ciphers}CAST/128 ")
            AC_CHECK_FUNCS(EVP_idea_cfb,
                cf_openssl_ciphers="${cf_openssl_ciphers}IDEA/128 ")
            AC_CHECK_FUNCS(EVP_rc5_32_12_16_cfb,
                cf_openssl_ciphers="${cf_openssl_ciphers}RC5.16/128 RC5.12/128 RC5.8/128 ")
            AC_CHECK_FUNCS(EVP_des_ede3_cfb,
                cf_openssl_ciphers="${cf_openssl_ciphers}3DES/168 ")
            AC_CHECK_FUNCS(EVP_des_cfb,
                cf_openssl_ciphers="${cf_openssl_ciphers}DES/56 ")
        fi
    else
        AC_MSG_RESULT(OpenSSL version below 0.9.6 - OpenSSL support disabled)
    fi
fi

dnl taken from ircd's Config script
AC_MSG_CHECKING(for non-blocking socket implementation)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined(O_NONBLOCK)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NONBLOCK))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_POSIX) AC_MSG_RESULT( O_NONBLOCK ),, AC_MSG_RESULT( cross compiling ))

AC_MSG_CHECKING(for mmap support)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>
int main() {
  return mmap((caddr_t)0, (off_t)0, PROT_READ, MAP_SHARED, 0, (off_t)0); 
}
], AC_DEFINE(USE_MMAP) AC_MSG_RESULT(yes),AC_MSG_RESULT(no), AC_MSG_RESULT( unable to test ))

AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined( O_NDELAY ) && !defined( NBLOCK_POSIX )
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NDELAY))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_BSD) AC_MSG_RESULT( O_NDELAY ),, AC_MSG_RESULT(unable to test))

AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if !defined(NBLOCK_BSD) && !defined(NBLOCK_POSIX) && defined(FIONBIO)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, FIONBIO))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif /* !NBLOCK_POSIX && !NBLOCK_BSD && FIONBIO */
	exit(1);
}
], AC_DEFINE(NBLOCK_SYSV) AC_MSG_RESULT(FIONBIO),, AC_MSG_RESULT(unable to test))

dnl taken from ircd's Config script
AC_MSG_CHECKING(signal implementation)
AC_TRY_RUN(
[
int main()
{
#if defined(HAVE_SIGACTION)
	exit(0);
#else
	exit(1);
#endif
}
], AC_DEFINE(POSIX_SIGNALS) AC_MSG_RESULT(posix),
    AC_TRY_RUN(
[
#include <signal.h>
int calls = 0;
void handler()
{
	if (calls) return;
 	calls++;
	kill(getpid(), SIGTERM);
	sleep(1);
}
int main()
{
	signal(SIGTERM, handler);
	kill(getpid(), SIGTERM);
	exit (0);
}
], AC_DEFINE(BSD_RELIABLE_SIGNALS) AC_MSG_RESULT(bsd),
    AC_DEFINE(SYSV_UNRELIABLE_SIGNALS) AC_MSG_RESULT(sysv), AC_MSG_RESULT(uknown)),
AC_MSG_RESULT(unknown))

dnl don't add more of these unless it's critical.  Trying to get rid of them.
AC_MSG_CHECKING(operating system)
case "$target" in
*-solaris2*) AC_DEFINE(OS_SOLARIS2) AC_MSG_RESULT(Solaris 2.x) ;;
*) AC_MSG_RESULT(nothing special required) ;;
esac

AC_OUTPUT(Makefile src/Makefile tools/Makefile zlib/Makefile)


if test "X${cf_openssl_ciphers}" != "X"; then
  echo 
  echo "Available cryptlinks ciphers:"
  echo
  echo "${cf_openssl_ciphers}"
  echo
fi

